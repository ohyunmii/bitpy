# 사전(dict)
# 매핑형, 변경 가능 자료
# 순서 없으며 -> 인덱싱, 슬라이싱 모두 불가
# 길이(Len), 포함 여부(in or not in)
# 사전의 기본적인 연산의 대상은 키의 목록(dict_keys)


def define_dict():
    """
    사전의 정의
    """
    dct =dict() # 빈 사전
    print(dct, type(dct))

    dct = {} # 빈 사전

    # literal을 이용한 생성
    dct = { "basketball": 5, "baseball": 9}

    # 새로운 키-값을 할당
    dct['soccer'] = 10 # 새 키가 만들어진다
    # 사전의 키는 불변자료형이어야 하며, 키는 중복될 수 없기 때문에
    # 이미 있는 키에 새 데이터를 할당하면 내부 데이터가 변경됨

    dct['soccer'] = 11 # 기존 키에 매핑된 데이터를 갱신

    # 길이의 확인
    print("Length of dct:", len(dct)) # key를 대상으로 확인

    # 포함 여부 확인: in, not in
    print("baseball in dct?", "baseball" in dct)
    print("baseball in dct?", "baseball" in dct.keys()) # 위와 같음. 기본적으로 key를 대상으로 검색을 하기 때문에 굳이 명시하지 않아도 됨.

    # 값의 검색
    print("10 in dct value?", 10 in dct.values()) # False: 검색 대상을 값으로 변경

    # 키의 목록, 값의 목록, 키-값 쌍튜플의 목록
    print("KEYS of dct:", dct.keys()) # 리스트와 비슷함. 리스트로 캐스팅 가능
    print("VALUES of dct:", dct.values())
    print("ITEMS of dct:", dct.items()) # dict items: (키, 값) 튜플의 리스트

    # 키워드 인자를 이용한 사전의 생성
    d1 = dict(key1="value1", key2="value2")
    print(d1, type(d1))

    # (키, 값) 튜플 리스트로 사전 생성
    d2 = dict([("key1", "value1"), ("key2", "value2")])
    print(d2, type(d2))

    # 키의 목록과 값의 목록이 별도로 있을 때
    keys = ("one", "two", "three", "four")
    values = (1, 2, 3, 4)
    # zip 객체로 키의 목록과 값의 목록을 하나로 묶어서 dict로 전달
    d3 = dict(zip(keys, values))
    print(d3, type(d3))


def using_dict():
    """
    사전의 사용법
    """
    phones = {"홍길동": "010-1234-5678",
              "장길산": "010-9876-5432",
              "임꺽정": "010-5678-9012"}
    print(phones)

    # 키의 목록: keys()
    keys = phones.keys() # dict_keys
    print("KEYS of phones:", keys)
    # dict_keys는 순차 자료형이기 때문에 list, set 변환 가능
    lst_keys = list(keys)
    # 길이, 연결, 반복, 인덱싱 슬라이싱 모두 가능
    # 값의 목록: values()
    values = phones.values() # dict_values
    print("VALUES of phones:", values)
    # 키 -값 튜플의 리스트
    items = phones.items() # dict_times
    print("ITEMS of phones:", items)

    # 새 요소 추가
    phones['일지매'] = "010-2345-6789"
    print(phones)

    # 요소에 접근
    print("홍길동의 전화번호:", phones["홍길동"])
    # 키에 없는 요소의 접근 --> Key Error
    if "고길동" in phones:
        print("고길동의 전화번호:", phones['고길동'])

    # 키에 없는 요소의 접근 : get
    print("고길동의 전화번호:", phones.get("고길동")) # None -> 타 언어의 null과 비슷
    # 키가 없을 때에도 기본값을 얻어오고자 하는 경우
    # 두 번째 인자는 기본 값
    print("고길동의 전화번호:", phones.get("고길동", "누구?"))

    # 삭제: 키를 이용해서 객체를 얻어온 이후 -> del
    del phones["홍길동"]
    print(phones)

    # pop: 값을 가져오면서 객체 삭제
    data = phones.pop("일지매")
    print(data)
    print(phones)

    # popitem: 키-값 튜플을 가져오고 삭제
    item = phones.popitem()
    print("item: key={}, values={}".format(item[0], item[1]))
    print(phones)


def loop():
    """
    사전의 순회
    """
    phones = {"홍길동": "010-1234-5678",
              "장길산": "010-9876-5432",
              "임꺽정": "010-5678-9012"}
    print(phones)

    # 기본적인 반복
    for k in phones: # 키의 목록을 대상으로 한다
        print("KEY = {} -> VALUE = {}".format(k, phones.get(k))) # 비효율적임..;; 계속 메모리 접근이 일어나기 때문

    # items() -> 키-값 튜플의 리스트
    for item in phones.items():
        # print(item)
        print("{} -> {}".format(item[0], item[1]))

    # 튜플의 언패킹 이용
    # for (key,value) in phones.items():
    for key, value in phones.items():
        print("{} -> {}".format(key, value))



if __name__ == "__main__":
    # define_dict()
    # using_dict()
    loop()